{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/cmax9/documents/Developer/spaceX/components/GridStats/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { push } from \"react-burger-menu\";\nimport getPastLaunches from \"../../services/getPastLaunchesNP\";\nimport getPayload from \"../../services/getPayload\";\nimport StatCard from \"../StatCard\";\nimport { Grid } from \"./styles\";\n\nconst GridStats = () => {\n  const {\n    0: dragonInfo,\n    1: setdragonInfo\n  } = useState([]);\n  const {\n    0: succes,\n    1: setsucces\n  } = useState(\"\");\n  const {\n    0: fail,\n    1: setfail\n  } = useState(\"\");\n  const {\n    0: customer,\n    1: setcustomer\n  } = useState([]);\n  const {\n    0: customerName,\n    1: setcustomerName\n  } = useState([]);\n  const {\n    0: customerLaunches,\n    1: setcustomerLaunches\n  } = useState([]); // bring the data for launch stats\n\n  useEffect(() => {\n    getPastLaunches().then(data => {\n      setdragonInfo(data);\n    });\n  }, []);\n  useEffect(() => {\n    const succeslaunch = dragonInfo.filter(item => {\n      return !item.success;\n    });\n    const faillaunch = dragonInfo.filter(item => {\n      return item.success;\n    });\n    setsucces(succeslaunch.length);\n    setfail(faillaunch.length);\n  }, [dragonInfo]);\n  const dataSucces = {\n    labels: [\"fail\", \"succes\"],\n    datasets: [{\n      label: \"# of Votes\",\n      data: [fail, succes],\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\"],\n      borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\"],\n      borderWidth: 1\n    }]\n  }; // bring the data for customer stats\n\n  useEffect(() => {\n    getPayload().then(data => {\n      setcustomer(data);\n    });\n  }, []);\n  useEffect(() => {\n    const name = customer.map(item => {\n      return item.customers[0];\n    });\n    let unicos = Array.from(new Set(name));\n    let first = unicos.slice(0, 5);\n    setcustomerName(first);\n  }, [customer]);\n  useEffect(() => {\n    const result = [];\n\n    for (let i = 0; i < customerName.length; i++) {\n      let element = customer.filter(item => {\n        const total = item.customers.includes(customerName[i]);\n        return total;\n      });\n      result.push(element.length);\n    }\n\n    setcustomerLaunches(result);\n  }, [customerName]);\n  const dataCustomer = {\n    labels: customerName,\n    datasets: [{\n      label: \"# of Votes\",\n      data: customerLaunches,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\"],\n      borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\"],\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(StatCard, {\n      title: \"launch stats\",\n      items: dataSucces\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatCard, {\n      title: \"commercial Customers\",\n      items: dataCustomer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\nexport default GridStats;","map":{"version":3,"sources":["/mnt/c/Users/cmax9/documents/Developer/spaceX/components/GridStats/index.js"],"names":["React","useState","useEffect","push","getPastLaunches","getPayload","StatCard","Grid","GridStats","dragonInfo","setdragonInfo","succes","setsucces","fail","setfail","customer","setcustomer","customerName","setcustomerName","customerLaunches","setcustomerLaunches","then","data","succeslaunch","filter","item","success","faillaunch","length","dataSucces","labels","datasets","label","backgroundColor","borderColor","borderWidth","name","map","customers","unicos","Array","from","Set","first","slice","result","i","element","total","includes","dataCustomer"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from \"react\";\nimport { push } from \"react-burger-menu\";\nimport getPastLaunches from \"../../services/getPastLaunchesNP\";\nimport getPayload from \"../../services/getPayload\";\n\nimport StatCard from \"../StatCard\";\n\nimport { Grid } from \"./styles\";\n\nconst GridStats = () => {\n  \n\n  const [dragonInfo, setdragonInfo] = useState([]);\n  const [succes, setsucces] = useState(\"\");\n  const [fail, setfail] = useState(\"\");\n  \n  const [customer, setcustomer] = useState([]);\n  const [customerName, setcustomerName] = useState([]);\n  const [customerLaunches, setcustomerLaunches] = useState([]);\n\n\n  // bring the data for launch stats\n  useEffect(() => {\n    getPastLaunches().then((data) => {\n      setdragonInfo(data);\n    });\n  }, []);\n  useEffect(() => {\n    const succeslaunch = dragonInfo.filter((item) => {\n      return !item.success;\n    });\n    const faillaunch = dragonInfo.filter((item) => {\n      return item.success;\n    });\n    setsucces(succeslaunch.length);\n    setfail(faillaunch.length);\n  }, [dragonInfo]);\n\n    const dataSucces = {\n      labels: [\"fail\", \"succes\"],\n      datasets: [\n        {\n          label: \"# of Votes\",\n          data: [fail, succes],\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\"],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\"],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n  // bring the data for customer stats\n  useEffect(() => {\n    getPayload().then((data) => {\n      setcustomer(data);\n    });\n  }, []);\n  \n  useEffect(()=>{\n    const name= customer.map((item)=>{\n      return item.customers[0];\n    })\n    let unicos = Array.from(new Set(name));\n    let first= unicos.slice(0,5)\n    setcustomerName(first);\n  },[customer])\n  \n  useEffect(()=>{\n    const result=[]\n    for (let i = 0; i < customerName.length; i++) {\n      let element = customer.filter((item)=>{\n        const total = item.customers.includes(customerName[i]);\n        return total\n      })\n      result.push(element.length)\n    }\n    setcustomerLaunches(result)\n    \n  },[customerName])\n\n  const dataCustomer = {\n    labels: customerName,\n    datasets: [\n      {\n        label: \"# of Votes\",\n        data: customerLaunches,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <Grid>\n      <StatCard title=\"launch stats\" items={dataSucces} />\n      <StatCard title=\"commercial Customers\" items={dataCustomer} />\n    </Grid>\n  );\n};\n\nexport default GridStats;\n\n"]},"metadata":{},"sourceType":"module"}